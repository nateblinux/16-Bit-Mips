
// Behavioral implementation of MIPS Register File (modified to 16 bit reg width over 4 regs)
module reg_file (RR1,RR2,WR,WD,RegWrite,RD1,RD2,clock);

  input [1:0] RR1,RR2,WR;
  input [15:0] WD;
  input RegWrite,clock;
  output [15:0] RD1,RD2;

  reg [15:0] Regs[0:3];

  assign RD1 = Regs[RR1];
  assign RD2 = Regs[RR2];

  initial Regs[0] = 0;

  always @(negedge clock)
    if (RegWrite==1 & WR!=0) 
	Regs[WR] <= WD;

endmodule

//gate level half adder
module halfadder (S,C,x,y);
   input x,y;
   output S,C;
   
   xor (S,x,y);
   and (C,x,y);
endmodule

//gate level full adder
module fulladder (S,C,x,y,z);
   input x,y,z;
   output S,C;
   wire S1,D1,D2; 
    halfadder HA1 (S1,D1,x,y),
              HA2 (S,D2,S1,z);
    or g1(C,D2,D1);
endmodule

//2 to 1 multiplexer
//choose x on z=0, y on z=1
module two_bit_multiplex(x, y, z, O);
    input x, y, z;
    output O;
    not n1(z1, z);
    and a1(S1, x, y),
       a2(S2, y, z),
       a3(S3, x, z1);
    or(O, S1, S2, S3);
endmodule

//16 bit wide 2 to 1 multiplexer
module two_to_one_sixteen_bit_mux(x, y, z, O);
    input [15:0] x, y;
    input z;
    output [15:0] O;
    two_bit_multiplex mux0 (x[0], y[0], z, O[0]),
                      mux1 (x[1], y[1], z, O[1]),
                      mux2 (x[2], y[2], z, O[2]),
                      mux3 (x[3], y[3], z, O[3]),
                      mux4 (x[4], y[4], z, O[4]),
                      mux5 (x[5], y[5], z, O[5]),
                      mux6 (x[6], y[6], z, O[6]),
                      mux7 (x[7], y[7], z, O[7]),
                      mux8 (x[8], y[8], z, O[8]),
                      mux9 (x[9], y[9], z, O[9]),
                      mux10 (x[10], y[10], z, O[10]),
                      mux11 (x[11], y[11], z, O[11]),
                      mux12 (x[12], y[12], z, O[12]),
                      mux13 (x[13], y[13], z, O[13]),
                      mux14 (x[14], y[14], z, O[14]),
                      mux15 (x[15], y[15], z, O[15]);
endmodule

//4 to 1 multiplexer
module four_bit_multiplex(A, B, C, D, ctrl1, ctrl2, O);
    input A, B, C, D, ctrl1, ctrl2;
    output O;
    two_bit_multiplex m1(A, B, ctrl1, tmp),
                      m2(C, D, ctrl1, tmp1),
                      m3(tmp, tmp1, ctrl2, O);
endmodule

//alu module for all but the most significant bit
module one_bit_ALU(A, B, bnot, anot, less, carryIn, ctrl2, ctrl1, out, Cout);
    input A, B, bnot, anot, less, carryIn, ctrl1, ctrl2;
    output out, Cout;
    
    not n1(nA, A),
        n2(nB, B);
        
    two_bit_multiplex mA(A, nA, anot, uA),
                      mB(B, nB, bnot, uB);
    
    and a1(BandA, uA, uB);
    or  o1(BorA, uA, uB);
    
    fulladder adder(S, Cout, uA, uB, carryIn);
    
    four_bit_multiplex m1(BandA, BorA, S, less, ctrl1, ctrl2, out);
endmodule

//alu module for the most significant bit
module one_bit_ALU2(A, B, bnot, anot, set, carryIn, ctrl2, ctrl1, out, Cout);
    input A, B, bnot, anot, carryIn, ctrl1, ctrl2;
    output out, Cout, set;
    
    not n1(nA, A),
        n2(nB, B);
        
    two_bit_multiplex mA(A, nA, anot, uA),
                      mB(B, nB, bnot, uB);
    
    and a1(BandA, uA, uB);
    or  o1(BorA, uA, uB);
    
    fulladder adder(S, Cout, uA, uB, carryIn);
    and(set, S, 1);
    
    four_bit_multiplex m1(BandA, BorA, S, 1'b0, ctrl1, ctrl2, out);
endmodule

//16 bit arithmetic logic unit
module alu(op, a, b, result, zero);
    input[3:0] op;
    input [15:0] a, b;
    output[15:0] result;
    output zero;
    
   one_bit_ALU a1 (a[0], b[0], op[2], op[3], set, op[2], op[1], op[0], result[0], Carry1);
   one_bit_ALU a2 (a[1], b[1], op[2], op[3], 1'b0, Carry1, op[1], op[0], result[1], Carry2);
   one_bit_ALU a3 (a[2], b[2], op[2], op[3], 1'b0, Carry2, op[1], op[0], result[2], Carry3);
   one_bit_ALU a4 (a[3], b[3], op[2], op[3], 1'b0, Carry3, op[1], op[0], result[3], Carry4);
   one_bit_ALU a5 (a[4], b[4], op[2], op[3], 1'b0, Carry4, op[1], op[0], result[4], Carry5);
   one_bit_ALU a6 (a[5], b[5], op[2], op[3], 1'b0, Carry5, op[1], op[0], result[5], Carry6);
   one_bit_ALU a7 (a[6], b[6], op[2], op[3], 1'b0, Carry6, op[1], op[0], result[6], Carry7);
   one_bit_ALU a8 (a[7], b[7], op[2], op[3], 1'b0, Carry7, op[1], op[0], result[7], Carry8);
   one_bit_ALU a9 (a[8], b[8], op[2], op[3], 1'b0, Carry8, op[1], op[0], result[8], Carry9);
   one_bit_ALU a10 (a[9], b[9], op[2], op[3], 1'b0, Carry9, op[1], op[0], result[9], Carry10);
   one_bit_ALU a11 (a[10], b[10], op[2], op[3], 1'b0, Carry10, op[1], op[0], result[10], Carry11);
   one_bit_ALU a12 (a[11], b[11], op[2], op[3], 1'b0, Carry11, op[1], op[0], result[11], Carry12);
   one_bit_ALU a13 (a[12], b[12], op[2], op[3], 1'b0, Carry12, op[1], op[0], result[12], Carry13);
   one_bit_ALU a14 (a[13], b[13], op[2], op[3], 1'b0, Carry13, op[1], op[0], result[13], Carry14);
   one_bit_ALU a15 (a[14], b[14], op[2], op[3], 1'b0, Carry14, op[1], op[0], result[14], Carry15);
   one_bit_ALU2 a16 (a[15], b[15], op[2], op[3], set, Carry15, op[1], op[0], result[15], Cout);
   
   xor(o1, Carry3, Cout);
   nor(zero, result[0], result[1], result[2], result[3]);
    
endmodule

//main control unit for interpretting opcodes into control signals for the rest of the CPU
module MainControl (Op,Control); 
  input [3:0] Op;
  output reg [10:0] Control;
// Control bits: RegDst,ALUSrc, RegWrite, MemToReg, MemWrite, bne, beq, ALUOp
  always @(Op) case (Op)
    4'b0010: Control <= 12'b101_00_00_0000; // AND
    4'b0111: Control <= 12'b011_00_00_0010; // ADDI
    4'b0000: Control <= 12'b101_00_00_0010; //ADD
    4'b0001: Control <= 12'b101_00_00_0110; //SUB
    4'b0011: Control <= 12'b101_00_00_0001; //OR
    4'b0100: Control <= 12'b101_00_00_1100; //NOR
    4'b0101: Control <= 12'b101_00_00_1101; //NAND
    4'b0110: Control <= 12'b101_00_00_0111; //SLT
    4'b1000: Control <= 12'b011_10_00_0010; //LW
    4'b1001: Control <= 12'b010_01_00_0010; //SW
    4'b1010: Control <= 12'b000_00_01_0110;//BEQ
    4'b1011: Control <= 12'b000_00_10_0110;//BNE
    
    
  endcase
endmodule

//gate level branching logic
module BranchControl (Beq, Bne, Zero, BranchCtrl);
    input Beq, Bne, Zero;
    output BranchCtrl;
    and beqand (beqtrue, Beq, Zero),
        bneand (bnetrue, Bne, ~Zero);
    or (BranchCtrl, beqtrue, bnetrue);
endmodule

//Overall CPU
module CPU (clock,WD,IR,PC);

  input clock;
  output [15:0] WD,IR,PC;
  reg[15:0] PC, IMemory[0:1023], DMemory[0:1023];
  wire [15:0] IR,SignExtend,NextPC,RD2,A,B,ALUOut,PCplus4,Target;
  wire [1:0] WR;
  wire [3:0] ALUctl;
  wire [1:0] ALUOp;
  initial begin 
 // Program: swap memory cells and compute absolute value
    /*IMemory[0] = 16'b0111_00_01_00001111;  // addi $t1, $0,  15   ($t1=15)
    IMemory[1] = 16'b0111_00_10_00000111;  // addi $t2, $0,  7    ($t2=7)
    IMemory[2] = 16'b0010_01_10_11_000000;  // and  $t3, $t1, $t2  ($t3=7)
    IMemory[3] = 16'b0001_01_11_10_000000;  // sub  $t2, $t1, $t3  ($t2=8)
    IMemory[4] = 16'b0011_10_11_10_000000;  // or   $t2, $t2, $t3  ($t2=15)
    IMemory[5] = 16'b0000_10_11_11_000000;  // add  $t3, $t2, $t3  ($t3=22)
    IMemory[6] = 16'b0100_10_11_01_000000;  // nor  $t1, $t2, $t3  ($t1=-32)
    IMemory[7] = 16'b0110_11_10_01_000000;  // slt  $t1, $t3, $t2  ($t1=0)
    IMemory[8] = 16'b0110_10_11_01_000000;  // slt  $t1, $t2, $t3  ($t1=1)
    */
    
    IMemory[0] = 16'b1000_00_01_00000000;  // lw $t1, 0($0) 
    IMemory[1] = 16'b1000_00_10_00000100;  // lw $t2, 4($0)
    IMemory[2] = 16'b0110_01_10_11_000000;  // slt $t3, $t1, $t2
    IMemory[3] = 16'b1010_11_00_00000010;  // beq $t3, $0, IMemory[6] 
    IMemory[4] = 16'b1001_00_01_00000100;  // sw $t1, 4($0) 
    IMemory[5] = 16'b1001_00_10_00000000;  // sw $t2, 0($0) 
    IMemory[6] = 16'b1000_00_01_00000000;  // lw $t1, 0($0) 
    IMemory[7] = 16'b1000_00_10_00000100;  // lw $t2, 4($0) 
    IMemory[8] = 16'b0100_10_10_10_000000;  // nor $t2, $t2, $t2 (sub $3, $1, $2 in two's complement)
    IMemory[9] = 16'b0111_10_10_00000001;  // addi $t2, $t2, 1 
    IMemory[10] = 16'b0000_01_10_11_000000;  // add $t3, $t1, $t2
 // Data
    DMemory [0] = 16'd7; // swap the cells and see how the simulation output changes
    DMemory [1] = 16'd5;
  end
  initial PC = 0;
  assign IR = IMemory[PC>>2];
  //assign WR = (RegDst) ? IR[7:6]: IR[9:8]; // RegDst Mux
  two_bit_multiplex RegDstMux1 (IR[9], IR[7], RegDst, WR[1]),
                    RegDstMux0 (IR[8], IR[6], RegDst, WR[0]);
  //assign B  = (ALUSrc) ? SignExtend: RD2; // ALUSrc Mux 
  two_to_one_sixteen_bit_mux ALUSrcMux (RD2, SignExtend, ALUSrc, B);
  assign SignExtend = {{8{IR[7]}},IR[7:0]}; // sign extension unit
  reg_file rf (IR[11:10],IR[9:8],WR,WD,RegWrite,A,RD2,clock);
  alu fetch (4'b0010,PC,16'b100,PCplus4,Unused);
  alu ex (ALUctl, A, B, ALUOut, Zero);
  alu branch (4'b0010,SignExtend<<2,PCplus4,Target,Unused2);
                // Control bits: RegDst,ALUSrc, RegWrite, MemToReg, MemWrite, bne, beq, ALUOp
  MainControl MainCtr (IR[15:12],{RegDst,ALUSrc,RegWrite, MemtoReg, MemWrite, bne, beq ,ALUctl});
  //assign WD = (MemtoReg) ? DMemory[ALUOut>>2]: ALUOut; // MemtoReg Mux
  two_to_one_sixteen_bit_mux MemtoRegMux (ALUOut, DMemory[ALUOut>>2], MemtoReg, WD);
  //assign NextPC = ((beq && Zero) || (bne && !Zero)) ? Target: PCplus4; // Branch Mux
  BranchControl brchctl (beq, bne, Zero, branchctl);
  two_to_one_sixteen_bit_mux BranchMux (PCplus4, Target, branchctl, NextPC);
  always @(negedge clock) begin 
    PC <= NextPC;
    if (MemWrite) DMemory[ALUOut>>2] <= RD2;
  end
endmodule

// Test module
module test ();
  reg clock;
  wire signed [15:0] WD,IR,PC;
  CPU test_cpu(clock,WD,IR,PC);
  always #1 clock = ~clock;
  initial begin
    $display ("PC  IR                                WD");
    $monitor ("%2d  %b %2d (%b)",PC,IR,WD,WD);
    clock = 1;
    #20 $finish;
  end
endmodule

/* Output
Clock PC   IR                                 WD
1      0   00100000000010010000000000001111   15 (00000000000000000000000000001111)
0      4   00100000000010100000000000000111    7 (00000000000000000000000000000111)
1      4   00100000000010100000000000000111    7 (00000000000000000000000000000111)
0      8   00000001001010100101100000100100    7 (00000000000000000000000000000111)
1      8   00000001001010100101100000100100    7 (00000000000000000000000000000111)
0     12   00000001001010110101000000100010    8 (00000000000000000000000000001000)
1     12   00000001001010110101000000100010    8 (00000000000000000000000000001000)
0     16   00000001010010110101000000100101   15 (00000000000000000000000000001111)
1     16   00000001010010110101000000100101   15 (00000000000000000000000000001111)
0     20   00000001010010110101100000100000   22 (00000000000000000000000000010110)
1     20   00000001010010110101100000100000   22 (00000000000000000000000000010110)
0     24   00000001010010110100100000100111  -32 (11111111111111111111111111100000)
1     24   00000001010010110100100000100111  -32 (11111111111111111111111111100000)
0     28   00000001011010100100100000101010    0 (00000000000000000000000000000000)
1     28   00000001011010100100100000101010    0 (00000000000000000000000000000000)
0     32   00000001010010110100100000101010    1 (00000000000000000000000000000001)
1     32   00000001010010110100100000101010    1 (00000000000000000000000000000001)
*/
